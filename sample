import org.testng.*;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.testng.annotations.Listeners;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Listeners(CustomExcelResultListener.class)
public class TestClass {
    @Test
    public void testMethod1() {
        // Your test code here
        String value1 = "Value1";
        String value2 = "Value2";
        String value3 = "Value3";
        String value4 = "Value4";
        String value5 = "Value5";
        CustomExcelResultListener.setTestValues(value1, value2, value3, value4, value5);
    }

    @Test
    public void testMethod2() {
        // Your test code here
        String value1 = "AnotherValue1";
        String value2 = "AnotherValue2";
        String value3 = "AnotherValue3";
        String value4 = "AnotherValue4";
        String value5 = "AnotherValue5";
        CustomExcelResultListener.setTestValues(value1, value2, value3, value4, value5);
    }

    // Add more test methods as needed
}

class CustomExcelResultListener implements ITestListener, ISuiteListener {
    private static XSSFWorkbook workbook;
    private static XSSFSheet sheet;
    private static int rowIndex = 1; // Start from the second row (0-based index)

    private static ThreadLocal<String[]> testValuesThreadLocal = ThreadLocal.withInitial(() -> new String[5]);

    public CustomExcelResultListener() {
        // No-argument constructor
        // You can add initialization code here if needed
    }

    public static void setTestValues(String value1, String value2, String value3, String value4, String value5) {
        String[] values = new String[5];
        values[0] = value1;
        values[1] = value2;
        values[2] = value3;
        values[3] = value4;
        values[4] = value5;
        testValuesThreadLocal.set(values);
    }

    @Override
    public void onStart(ISuite suite) {
        // Create a new workbook and a single sheet for all test results
        workbook = new XSSFWorkbook();
        sheet = workbook.createSheet("TestResults");
        rowIndex = 1;
    }

    @Override
    public void onFinish(ISuite suite) {
        // Close the workbook after all tests have executed
        try (FileOutputStream fos = new FileOutputStream("TestResults.xlsx")) {
            workbook.write(fos);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onTestStart(ITestResult result) {
        // No action needed here
    }

    @Override
    public void onTestSuccess(ITestResult result) {
        recordResult(result);
    }

    @Override
    public void onTestFailure(ITestResult result) {
        recordResult(result);
    }

    @Override
    public void onTestSkipped(ITestResult result) {
        recordResult(result);
    }

    @Override
    public void onTestFailedButWithinSuccessPercentage(ITestResult result) {
        recordResult(result);
    }

    private void recordResult(ITestResult result) {
        String[] testValues = testValuesThreadLocal.get();
        testValuesThreadLocal.remove();

        Row row = sheet.createRow(rowIndex++);
        row.createCell(0).setCellValue(result.getName());

        for (int i = 0; i < 5; i++) {
            row.createCell(i + 1).setCellValue(testValues[i]);
        }

        if (result.getStatus() == ITestResult.SUCCESS) {
            row.createCell(6).setCellValue("PASS");
        } else if (result.getStatus() == ITestResult.FAILURE) {
            row.createCell(6).setCellValue("FAIL");
        } else {
            row.createCell(6).setCellValue("SKIP");
        }
    }

    // Implement other methods from ITestListener if needed
}
